From 67779215fc919075709d2072e412551b3e126a3d Mon Sep 17 00:00:00 2001
From: Andrea Bernabei <and.bernabei@gmail.com>
Date: Tue, 31 May 2016 14:21:44 +0100
Subject: [PATCH] Flickable: fix minXExtent/minYExtent when content is smaller
 than view

At the moment, defining leftMargin (or topMargin) and contentWidth
(or contentHeight) so that "leftMargin+contentWidth < flickable.width"
(or topMargin+contentHeight < flickable.height) leads to widthRatio
(or heightRatio) having value != 1.
The value should, however, be 1, as the content is completely visible
inside the view, margins included.

As a sideeffect, under the assumptions described above, it will now
not be possible to scroll the leftMargin (or topMargin) out of screen,
something which was possible (and it shouldn't have) before this fix.

Task-number: QTBUG-53726
Change-Id: I22426c8038e90a2cfc7445914206eae0e781a3fb
---
 src/quick/items/qquickflickable.cpp                |  4 ++--
 .../qquickflickable/data/ratios_smallContent.qml   | 19 +++++++++++++++
 .../quick/qquickflickable/tst_qquickflickable.cpp  | 28 ++++++++++++++++++++++
 3 files changed, 49 insertions(+), 2 deletions(-)
 create mode 100644 tests/auto/quick/qquickflickable/data/ratios_smallContent.qml

diff --git a/src/quick/items/qquickflickable.cpp b/src/quick/items/qquickflickable.cpp
index 32d445d..b0980cd 100644
--- a/src/quick/items/qquickflickable.cpp
+++ b/src/quick/items/qquickflickable.cpp
@@ -1580,13 +1580,13 @@ qreal QQuickFlickable::minXExtent() const
 qreal QQuickFlickable::maxXExtent() const
 {
     Q_D(const QQuickFlickable);
-    return qMin<qreal>(0, width() - vWidth() - d->hData.endMargin);
+    return qMin<qreal>(minXExtent(), width() - vWidth() - d->hData.endMargin);
 }
 /* returns -ve */
 qreal QQuickFlickable::maxYExtent() const
 {
     Q_D(const QQuickFlickable);
-    return qMin<qreal>(0, height() - vHeight() - d->vData.endMargin);
+    return qMin<qreal>(minYExtent(), height() - vHeight() - d->vData.endMargin);
 }
 
 void QQuickFlickable::componentComplete()
diff --git a/tests/auto/quick/qquickflickable/data/ratios_smallContent.qml b/tests/auto/quick/qquickflickable/data/ratios_smallContent.qml
new file mode 100644
index 0000000..07bad68
--- /dev/null
+++ b/tests/auto/quick/qquickflickable/data/ratios_smallContent.qml
@@ -0,0 +1,19 @@
+import QtQuick 2.0
+
+Flickable {
+    property double heightRatioIs: visibleArea.heightRatio
+    property double widthRatioIs: visibleArea.widthRatio
+
+    width: 200
+    height: 200
+    contentWidth: item.width
+    contentHeight: item.height
+    topMargin: 20
+    leftMargin: 40
+
+    Item {
+        id: item
+        width: 100
+        height: 100
+    }
+}
diff --git a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
index dc71717..2e134ff 100644
--- a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
+++ b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
@@ -95,6 +95,7 @@ private slots:
     void movementFromProgrammaticFlick();
     void cleanup();
     void contentSize();
+    void ratios_smallContent();
 
 private:
     void flickWithTouch(QQuickWindow *window, QTouchDevice *touchDevice, const QPoint &from, const QPoint &to);
@@ -1817,6 +1818,33 @@ void tst_qquickflickable::contentSize()
     QCOMPARE(chspy.count(), 1);
 }
 
+// QTBUG-53726
+void tst_qquickflickable::ratios_smallContent()
+{
+    QScopedPointer<QQuickView> window(new QQuickView);
+    window->setSource(testFileUrl("ratios_smallContent.qml"));
+    QTRY_COMPARE(window->status(), QQuickView::Ready);
+    QQuickViewTestUtil::centerOnScreen(window.data());
+    QQuickViewTestUtil::moveMouseAway(window.data());
+    window->setTitle(QTest::currentTestFunction());
+    window->show();
+    QVERIFY(QTest::qWaitForWindowExposed(window.data()));
+    QQuickItem *root = window->rootObject();
+    QVERIFY(root);
+    QQuickFlickable *obj = qobject_cast<QQuickFlickable*>(root);
+    QVERIFY(obj != 0);
+
+    //doublecheck the item, as specified by contentWidth/Height, fits in the view
+    //use tryCompare to allow a bit of stabilization in component's properties
+    QTRY_COMPARE(obj->leftMargin() + obj->contentWidth() + obj->rightMargin() <= obj->width(), true);
+    QTRY_COMPARE(obj->topMargin() + obj->contentHeight() + obj->bottomMargin() <= obj->height(), true);
+
+    //the whole item fits in the flickable, heightRatio should be 1
+    QCOMPARE(obj->property("heightRatioIs").toDouble(), 1.);
+    QCOMPARE(obj->property("widthRatioIs").toDouble(), 1.);
+}
+
+
 QTEST_MAIN(tst_qquickflickable)
 
 #include "tst_qquickflickable.moc"
-- 
2.7.4

